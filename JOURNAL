Rusty Game of Life

Goals:
  - Infinite world
  - Pan/zoom camera
  - Fast as possible

Components:
  - UI using ggez (see: https://www.youtube.com/watch?v=DoK7bL_83gI)
    - https://github.com/mathletedev/game-of-life
  - Model - maintaining the universe and updating for each generation.

Journal:

  - Get the example version running
    - Upgraded to latest ggez
    - Added rand() starter

Commit: 84950f2

  - Switch out the model for an infinite hashmap.
    - Ref: https://lbarasti.com/post/game_of_life/
    - Created a sparse grid data structure, with unit tests.

Commit: f03a329

  - First attempt at the sparse version of the algorithm.
    - Looks like it's not correct, or fast!

Commit: 0d0b866

  - Fix: get the thresholds right!

Commit:

  - SOLVED: seems to be skipping frames if things take too long. Hence jerky output.
    - The grid lines are being drawn too often... removing them speeds up things hugely!
    - Draw the lines in a separate phase.
  - Change draw to iterate the actual cells, not all cells.
  - Massive improvement in performance.

Commit: d92d907

  - Added 'g' toggle grid

Commit: 3d3239d

  - Show stats on possible FPS, generation, number of cells, etc.
    - Added generation count
    - Increased the size of the text
    - Number of cells
  - Improved the draw efficiency
  - Added some debug logging to see what is going on

Commit: af0f2f6

  - Panning
    - Use arrow keys
      - Normal moves by 10, SHIFTED moves by 100.
    - 'C' centers again
    - Move FPS to +/-

Commit: bf50fae

  - Window resize
    - Add all view params to the state.
    - Drive the view_size from the window_size.

Commit:


  - TODO Only return elements in the current view
  - TODO Implement panning (enable negative coordinates)
  - TODO Implement zooming
  - TODO Reinstate the mouse to draw
  - TODO Implement load/save
  - TODO Parallelise the update function
  - TODO Convert grid.elements() to an iterator
