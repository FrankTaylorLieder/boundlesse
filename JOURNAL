Rusty Game of Life

Goals:
  - Infinite world
  - Pan/zoom camera
  - Fast as possible

Components:
  - UI using ggez (see: https://www.youtube.com/watch?v=DoK7bL_83gI)
    - https://github.com/mathletedev/game-of-life
  - Model - maintaining the universe and updating for each generation.

Journal:

  - Get the example version running
    - Upgraded to latest ggez
    - Added rand() starter

Commit: 84950f2

  - Switch out the model for an infinite hashmap.
    - Ref: https://lbarasti.com/post/game_of_life/
    - Created a sparse grid data structure, with unit tests.

Commit: f03a329

  - First attempt at the sparse version of the algorithm.
    - Looks like it's not correct, or fast!

Commit: 0d0b866

  - Fix: get the thresholds right!

Commit:

  - SOLVED: seems to be skipping frames if things take too long. Hence jerky output.
    - The grid lines are being drawn too often... removing them speeds up things hugely!
    - Draw the lines in a separate phase.
  - Change draw to iterate the actual cells, not all cells.
  - Massive improvement in performance.

Commit: d92d907

  - Added 'g' toggle grid

Commit: 3d3239d

  - Show stats on possible FPS, generation, number of cells, etc.
    - Added generation count
    - Increased the size of the text
    - Number of cells
  - Improved the draw efficiency
  - Added some debug logging to see what is going on

Commit: af0f2f6

  - Panning
    - Use arrow keys
      - Normal moves by 10, SHIFTED moves by 100.
    - 'C' centers again
    - Move FPS to +/-

Commit: bf50fae

  - Window resize
    - Add all view params to the state.
    - Drive the view_size from the window_size.

Commit: 74c4959

  - Zoom
    - Implement zoom simply by changing the cell size
    - Change the pan to keep the current view center in the center.

Commit: 542def0

  - Any keypress makes the model dirty to cause a re-render.

Commit: b189174

  - Re-seed the space with random data.

Commit: c940d06

  - TODO Implement load/save
    - https://conwaylife.com/wiki/Run_Length_Encoded
      - Format:
        - Comment lines: #
        - Header: x=X, y=Y
          - Size of the overall pattern
        - Data line: ([N][bo])*$
        - Final line terminates with '!' instead of '$'
    - Building a separate RLE parser, which main can call and insert the data into the grid.
    - Patch the RLE into the grid

Commit: e99b370

  - Pass pattern file on command line

Commit: 2d24020
Commit: 96cc0ac

  - Performance analysis
    - ISSUE: with just 2 block of rand, the application seems to grind to a halt.
      - E.g it takes >2s to draw the screen. >2s to perform an update, which are then back to back without draws... so the app looks like its frozen.
      - At 60fps we get 16ms to complete an update and draw wihout impacting the framerate... but we don't need this for Life... we can set the fps to the current generation/s with a ceiling of 60.
        - We already do this...
      - Instead, don't loop in the update call. Allowing a draw for each update.
        - This improves things, but now our g/s is impacted by the draw rate.
        - Update 100ms per 20k alive. 200 cells per ms
        - Draw: 630ms per 20k alive. 31 cells per ms
    - Build some benches to optimise the update.
      - Start by moving the update code into the grid, so we can build benches outside the UI.
    - Use Criterion to build benches for the grid/update.
      - Benchmark the current implementation
        - Using Criterion
          - SOLVED: It does not appear to be running our code!
            - Not sure what was wrong... it seems to the working OK.
            - Build test to create a 100x100 pattern and run 10 generations.

Commit: 634f8e8

    - Added UniverseAB implementation that updates existing Universe/grid in place to avoid full rebuild
      - Added bench
        - This shows a 3x speed increase!

Commit: 97e6c72
Commit: 2c88c1d

      - TODO The code is very messy... need to refactor to enable both Universes to be interchanged.

  - UI locks up when too much is on the screen (4xR)
    - Created a simple repro showing locking up at 50k rects. Locks up during canvas.finish() operation.
    - Putting a message on the Discord.
      - Gist: https://gist.github.com/FrankTaylorLieder/c12fdad7977e4852d5a6d92100daedff
      - Got a response... Using Mesh is wrong... this creates a GPU object.
        - Instead you can use Quad which reuses a Mesh to draw different rects.
    - Replaced the Meshes with Quads... things run a lot faster now! And no lock ups!

Commit: c93a0f5

  - Following another comment on Discord, replaced Quads with a MeshBuilder.
    - This seems to work even faster...but I need to properly test it.

Commit: e931c5e

  - Failed to load gemini pattern with 800k cells...OOM
    - RLE reader constructs a full Vec<Vec<bool>> of the bounding box.
    - Instead we should capture the RLE file contents and inject the data directly into the grid.
      - We do not need to build or inject the empty cells. This is the big saving.
    - Current implementation loads data naively with 0,0 at top left.
      - This is different from previous, where data was centered on the screen.
      - We may decide to change to return list of live cells with bounding box so we can center it in main.rs, but not for now.



  - TODO RLE import: center pattern on screen. Place 0,0 at the center?
  - TODO Single step
  - TODO Rebuild main display loop to not busy draw when stopped.
  - TODO Main loop: always update display after each generation... don't skip draw.
  - TODO look at the game loop to work out how to update better. Avoid busy looping.
  - TODO Can we further optimise the grid implementation... play with different numbers of dead generations in the current AB implementation. (Maybe rename it too!)
  - TODO Formalise the grid API so we can enable different backend implementations.
  - TODO Build a file selector for loading.
  - TODO Reinstate the mouse to draw
  - TODO Parallelise the update function?
  - TODO Convert grid.elements() to an iterator
  - TODO Overview - showing where there are active cells across the entire space.
  - TODO Test whether MeshBuild is actually faster than Quad for drawing

  
